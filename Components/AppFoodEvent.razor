@using FoodAssembly.Models
@using System.Timers
@using FoodAssembly.Utilities

<div class="food-event pe-1 ps-1">

    <div class="border-2 food-event-section">

        <div class="d-flex pe-1 flex-column ps-1">

            <div class="d-inline-flex mt-5 border-2 food-event-section justify-content-center">
                <span style="font-size:20px;font-weight:bold">
                    @EndsAt
                    <i class="fas fa-clock"></i>
                </span>
            </div>

            <div class="d-inline-flex justify-content-center border-2 food-event-section">
                <img style="height: 110px;width: 110px;" src="/Assets/Foods/FoodAssemblyParty.png" />
            </div>

            <div class="d-inline-flex border-2 food-event-section justify-content-center">
                <h4>
                    @EventData.EventTitle

                </h4>
            </div>

            <div class="me-5 ms-5">
                <p >@EventData.EventDescription</p>

            </div>

        </div>

    </div>

    @foreach(var food in EventData.Items)
    {
        <div class=" p-2 bg-white m-2 ms-2 me-2 mt-2 mb-2 border-2 food-event-section justify-content-center " style="background-size:cover;background-position: center;background-repeat: no-repeat; background-image:url(@food.ImageUrl)">
            @food.FoodName
        </div>
    }

  

</div>



@code {

    [Parameter]
    public required FoodEvent EventData { get; set; }

    private string EndsAt { get; set; } = "";

    protected override Task OnInitializedAsync()
    {
        var currentDate = DateTime.Now;

        var eventExpiryDate = EventData.EndAt;

        var Timer = new System.Timers.Timer(1000);

        Timer.Elapsed += TimerElapsed;

        Timer.Enabled = true;

        Timer.AutoReset = true;

        Timer.Start();

        return base.OnInitializedAsync();
    }

    private void TimerElapsed(object? sender, ElapsedEventArgs e)
    {
        if (EventData.EndAt > DateTime.Now)
        {

            EndsAt = DateHelper.CalculateDiff(EventData.EndAt);

            this.StateHasChanged();
        }
        else
        {
            //no display
        }


    }

}
